1) Theory

Docker - это сервис для запуска приложений в контейнирах.

* Приложения запускаются в изолированной среде
* Легко запускать приложения на разных серверах
* Все зависимости приложений устанавливаются внутри контейнеров
* Легко масштабировать путем увеличения количества контейнеров
* Очень удобно использовать в процессе разработки приложений


Контейнер - это самый маленький элемент в docker

КОМПОНЕНТЫ DOCKER:

- CLIENT - клиент - запускается в командной строке и с помощью него подключаются к службе

- DAEMON - служба - отвечает за все задачи по созданию контейнеров и по обработке запросов от клиента - докер сервер

- HOST - хост - компьютер на котором запущен докер

- CONTAINER - контейнер -

- IMAGE - образ - используется как основа для создания контейнера, можно создать множество разных контейнеров с помощью одного образа
и все эти контейнеры будут независимы друг от друга

- REPOSITORY - Репозиторий - в репозитория находятся различные версии образа

- REGISTRY - Реестр - в реестре находятся различные репозитории

________________________________________________________________


КАК РАБОТАЮТ КОНТЕЙНЕРЫ
Контейнеры создаются на компьютере которые работают на операционной системе Линукс:


										Linux

			Container 1												Container 2

	На жестком диске создадутся файлы которые					все процессы независимы от
	будут доступны только этому контейнеру						container 1

			  Process
	Далее у контейнера создается определенный процесс,
	ядро здесь общее - следовательно процесс или
	процессы, которые запускаются внутри этого контейнера
	используют общее ядро.
____________________________________________________________________________________________________________________________________
			    Для запуска контейнера необходим Docker Engine который запускает Docker Daemon
____________________________________________________________________________________________________________________________________

								    Ядро - Linux Kernel
____________________________________________________________________________________________________________________________________
			Оперативная память - RAM		 Процессор - CPU 	  Сетевые ресурсы - Network
____________________________________________________________________________________________________________________________________
									Хранилище - Disk




После остановки и удаления контейнеров все соответствующие файлы которые были созданы конкретными контейнерами удаляются.
Докер автоматически останавливает те контейнеры у которых нету активных процессов.


------------------------------------------------------------------------------------------------------------------------------------------

2) ЧТО ТАКОЕ ОБРАЗЫ И ИХ СТРОЕНИЕ:


							IMAGE - образ - это набор файлов и образ статичен
							|                       |					  |
							|                       |					  |
							|                       |					  |
						 Container  			Container				Container



Строение образа:

Каждый образ состоит из слоев, каждый слой это набор файлов

- Все слои в образе read-only
- Образы можно перемещать и удалять
- Образы хранятся в репозиториях
- Есть официальные образы и образы сообщества


Что такое репозиторий Докер -  репозитория это набор различных версий какого то образа:

- В репозитории хранятся разные версии образа
- Разные версии помечаются разными тегами
- Одна версия образа может иметь несколько разных тегов




Для линукс сразу Docker Engine
Для мак docker desktop


в настройках докера я изменил с 4 ядер 4 гигов оперативки 1 гига для свопа и 64 гигов жесткого на :
						 4 ядра 2 гига оперативки  1 гиг для свопа  и 56 гигов жесткого.





установить расширение docker in the VS Code


$ docker version - показывает информацию о клиенте и сервере Docker

$ docker ps -a  - показывает список запущенных и остановленных контейнеров. Без опции "-a" можно посмотреть только запущенные контейнеры

$ docker images - показывает список локальных образов

$ docker run <image name> -  docker run создает и запускает контейнер а далее надо дать название образа например hello-world
при выполнении это команды докер сначала попытается найти образ с таким именем локально, если такого образа локально нет, то докер
обратится к докер хаб и попытается найти его там, если он есть в докер хаб то он будет скачан из докер хаб, сохранен локально
и после этого докер создаст контейнер на основании такого скаченного образа. hello-world образ это официальный образ докера и он
скачивается с докер хаб

$ docker rm <container_id> - удаляем контейнер

$ docker run busybox - с помощью busybox можно создать линукс контейнер


$ docker run -i -t busybox == docker run -it busybox - подключиться к процессу, в данном случае к "sh" к оболочке

# - пометка для всех команд внутри подключения к докер контейнеру

# hostname - посмотреть какое имя присвоено контейнеру оно совпадает с id этого контейнера

# hostname -i  - посмотреть IP-address который был присвоен этому контейнеру. У каждого контейнера докер есть IP-address и
эти IP-адреса присваивают каждому контейнеру автоматически

# ping 8.8.8.8 - цифры только для примера это показывает что у нашего контейнера есть доступ в интернет

# ping google.com - доступ у контейнера к интернету есть как и по IP-address так и по доменным именам

# exit - остановка подключения к контейнеру

$ docker stop <name> - same as # exit


$ docker container prune - команда удаления всех существующих контейнеров

_________________________________________________________________________________________________________________________


СОЗДАНИЕ КОНТЕЙНЕРА NGINX

С помощью сервиса NGINX можно быстро создавать веб сервер и передавать клиентам таким как веб браузер или мобильное приложение
разные статические файлы такие как картинки html, css or js файлы


$ docker run nginx - создать контейнер на основании образа nginx и после создания мы будем автоматически подключены к процессу

$ docker run -d nginx - "-d" запуск в фоновом режиме

$ docker container inspect <container_id> - посмотреть все детали запущенного контейнера, в нашем случай посмотреть IP-address
для подключения к серверу nginx

$ docker container inspect f3b1b7886e60 | grep IPAddress - фильтрация вывода деталей из инспектирования контейнера

$ docker stop <container_id or container_name> - остановить запущенный контейнер

$ docker exec -it <container_id or container_name> bash - "exec" выполняет команду в запущенном контейнере, "-it" опции подключения
интерактивното терминала, затем id или имя контейнера и "bash" название процесса

( $ cat index.html) - пример чтения файлов в оникс системах

$ docker run -d --name <my_container_name> nginx - команда создание сервера с кастомным именем

MAPPIN Портов
$ docker run -p 8080:80 nginx - для того что бы открыть доступ к сервису внутри контейнера
"run" - создание и запуск контейнера, "-p" - публикация порта, "8000:" - внешний порт, "80" - порт контейнера, "nginx" - название образа


example full - $ docker run -d -p 8080:80 --name my_name nginx


MAPPING Томов

docker run -v ${PWD}:/usr/share/nginx/html nginx  - заменяем страницу веб сервера на другую

- "run" - создание и запуск контейнера
- "-v" - подключение тома
- "${PWD}" - путь к локальной папке
- "/usr/share/nginx/html" - путь к папке внутри контейнера
- "nginx" - название образа


в VS Code открыть встроенный терминал control+` обратная кавычка находится рядом с шифтом где стрелки, а на рос раскладе слева от 1


в vscode shift+command+p - написать code - выбрать shell command: install 'code' command in PATH - что бы открывать папки в
vs code из терминала

_________________________________________________________________________________________________________________________

в папке Docker создатть новую nginx и в ней создать index.html

$ docker run -v ${PWD}:/usr/share/nginx/html -p 8080:80 -d --name my_new nginx

$ docker run -it --rm busybox  - "rm" автоматически удаляет контейнер из истории (останволенные) после остановки

перенос строк в командах:

$ docker run \
	--name my-name \
	-v ${PWD}:/usr/share/nginx/html \
	-p 8888:80 \
	-d \
	--rm \
	nginx

______________________________________________________________________________________________________

СОЗДАНИЕ ОБРАЗОВ

Создание образов целесообразно делать тогда когда не можешь найти подходящего образа на докерхаб,
то есть если разрабатываем приложение и хотим запустить приложение локально на своем компьютере


ЭТАПЫ СОЗДАНИЯ ОБРАЗОВ

* Для создания образа необходим Dockerfile
* Обычно Dockerfile помещают в корне папки приложения
* Dockerfile содержит инструкции по созданию образа
* При создании образа можно указать имя и тег для образа
* На основании готового образа можно создавать контейнеры



Пример инструкции в докер файле

FROM python:alpine  -  "python" - имя базового образа, "alpine" - тег базового образа, обычно самая мин версия

WORKDIR /app  -  с помощью этой инструкции создается рабочая директория внутри образа

COPY . .  -  мы копируем с локальной рабочей папки в папку WORKDIR

CMD [ "python", "main.py" ]  -  инструкция какая команда будет выполнена когда создастся контейнер
на основани уже созданного образа


$ docker build .  -  при нахождении в корневой директории докер будет искать докер файл и когда найдется
начинается процесс создания образа


$ docker build . -t my-calendar:4.1.3 - "-t" добавление имени и тега для образа, "my-calendar" - название
образа,  ":4.1.3" - опциональный тег

Если тег опустить, то автоматически будет добавлен тег latest


______________________________________________________________________________________________________

В корневой директории создаем директорию python-app с main.py фалйом

в python-app создаем докер файл и записываем в него:

FROM python:alpine

WORKDIR /app

COPY . .

CMD ["python", "main.py"]


$ cd python-app

$ docker build . -t my-calendar

$ docker run -it my-calendar

______________________________________________________________________________________________________


 in the root directory create node-app directory with files called index.mjs and Dockerfile


 inside th index.mjs add:

 import fs from 'fs'

fs.appendFile('my-file.txt', 'Node.js created the file', (err) => {
    if (err) throw err
    console.log('File has been saved!')
})



inside the Dockerfile add instraction:

FROM node:alpine

WORKDIR /app

COPY . .

CMD ["node", "index.mjs"]




$ cd node-app

$ docker build . -t my-file-writer

$ docker exec -it 5a00bfafc0a2 sh

Output: Error response from daemon: Container 5a00bfafc0a2 is not running
----


inside the index.mjs add :

setTimeout(() => console.log('The end'), 30000)



$ docker build . -t my-file-writer

$ docker run -t --name my-node-app my-file-writer

$ docker exec -t my-node-app sh

# ls

# cat my-file.tx

______________________________________________________________________________________________________


DOCKER COMPOSE - позволяет запускать одновременно несколько контейнеров используя одну команду,
но так же все эти запущенные контейнеры можно остановить также одной командной - имеет декларативный подход


Формат YML :

- lists

- dictionaries



Приемущества DOCKER COMPOSE

* Декларативный подход к созданию контейнеров

* Все необходимые контейнеры запускаются одной командной

* Автоматическое создание необходимых образов на основании dockerfile каждого приложения

* Автоматическое создание изолированной сети для взаимодействия контейнеров

* Благодаря DNS возможнно взаимодейтсвие между контейнерами, используя имена сервисов

--------


in the root directory create docker-compose-app directory with file called docker-compose.yml
